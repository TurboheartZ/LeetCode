import java.util.*;
public class Solution {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] in = {3,3,1,2,3,2,3,1};
		System.out.println(permuteUnique(in));
	}
	
    public static List<List<Integer>> permuteUnique(int[] nums) {
        if(nums.length==0){
            return null;
        }
        else{
            boolean[] visited = new boolean[nums.length];
            return generate(nums,visited);
        }
    }
    private static List<List<Integer>> generate(int[] nums, boolean[] visited){
        if(nums.length==0){
            return null;
        }
        else if(nums.length==1){
            List<List<Integer>> result = new ArrayList<List<Integer>>();
            List<Integer> r = new ArrayList<Integer>();
            r.add(nums[0]);
            result.add(r);
            return result;
        }
        else{
            List<List<Integer>> result = new ArrayList<List<Integer>>();
            //We do not need to use hashset to remove duplicate list, we only need to remove duplicate integer in this level
            //HashSet<List<Integer>> filter = new HashSet<List<Integer>>();
            HashSet<Integer> f = new HashSet<Integer>();
            for(int i = 0; i<nums.length; i++){
                if(visited[i]==false&&f.contains(nums[i])==false){
                    f.add(nums[i]);
                    visited[i] = true;
                    List<List<Integer>> data = generate(nums,visited);
                    for(List<Integer> x: data){
                        x.add(nums[i]);
                        result.add(x);
                    }
                    visited[i] = false;
                }
            }
            if(result.size()>0){
            	return result;
            }
            else{
                List<Integer> r = new ArrayList<Integer>();
                result.add(r);
                return result;
            }
        }
    }
}
