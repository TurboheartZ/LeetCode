import java.util.*;
public class Solution {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] input = {{1,0,0,0,1},{0,0,0,0,0},{0,0,1,0,0}};
		System.out.println(minTotalDistance(input));
	}
    //Still use BFS 
    public static int minTotalDistance(int[][] grid) {
        int row = grid.length;
        int col = grid[0].length;
        if(row==0||col==0){
            return 0;
        }
        else{
            int[][] total = new int[row][col];
            for(int i = 0; i<row; i++){
                for(int j = 0; j<col; j++){
                    if(grid[i][j]==1){
                        int[][] v = new int[row][col];
                        Queue<int[]> q = new LinkedList<int[]>();
                        int[] t = {i,j};
                        q.offer(t);
                        BFS(i,j,i,j,v,total,q);
                    }
                }
            }
            int minDist = Integer.MAX_VALUE;
            for(int i = 0; i<row; i++){
                for(int j = 0; j<col; j++){
                    minDist = Math.min(total[i][j],minDist);
                }
            }
            return minDist;
        }
    }
    private static void BFS(int x, int y, int px, int py, int[][] visited, int[][] total, Queue<int[]> que){
        if(x<0||x>=visited.length||y<0||y>=visited[0].length||visited[x][y]==1){
            return;
        }
        else{
            total[x][y] += Math.abs(x-px)+Math.abs(y-py);
            visited[x][y] = 1;
            int[] position = que.poll();
            int[] u = {x-1,y};
            que.offer(u);
            int[] d = {x+1,y};
            que.offer(d); 
            int[] l = {x,y-1};
            que.offer(l);
            int[] r = {x,y+1};
            que.offer(r);
            while(que.size()>0)
            BFS(position[0],position[1],px,py,visited,total,que);
        }
    }
}
