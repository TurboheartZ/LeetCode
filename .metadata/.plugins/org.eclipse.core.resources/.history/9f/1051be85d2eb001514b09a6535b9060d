import java.util.*;
public class Solution {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(generatePalindromes("abab"));
	}
    //First we check if it can form a palindrome permutation
    //Then we divide it into a half and do the permutation
    public static List<String> generatePalindromes(String s) {
        if(s.length()==0){
            return new ArrayList<String>();
        }
        HashSet<Character> filter = new HashSet<Character>();
        List<Character> container = new ArrayList<Character>();
        List<String> res = new ArrayList<String>();
        for(int i = 0; i<s.length(); i++){
            char x = s.charAt(i);
            if(filter.contains(x)){
                container.add(x);
                filter.remove(x);
            }
            else{
                filter.add(x);
            }
        }
        if(filter.size()>1){
            return res;
        }
        else{
            String last = "";
            if(filter.size()==1){
                for(char x : filter){
                    last += x;
                }
            }
            boolean[] visited = new boolean[container.size()];
            StringBuffer buff = new StringBuffer();
            DFS(container,res,buff,visited,last);
            return res;
        }
    }
    private static void DFS(List<Character> container,List<String> res, StringBuffer buff, boolean[] visited, String last){
        if(buff.length()==container.size()){
            if(last.length()==1){
                StringBuffer r = buff.reverse();
                String rr = buff.append(last).append(r).toString();
                res.add(rr);
                return;
            }
            else{
                String r = buff.reverse().toString();
                String rr = buff.reverse().append(r).toString();
                res.add(rr);
                return;                
            }
        }
        else{
            HashSet<Character> sameChar = new HashSet<Character>();
            for(int i = 0; i<container.size(); i++){
                if(visited[i]==true) continue;
                else if(sameChar.contains(container.get(i))) continue;
                else{
                    StringBuffer newbuff = new StringBuffer(buff);
                    char x = container.get(i);
                    sameChar.add(x);
                    visited[i] = true;
                    newbuff.append(x);
                    DFS(container,res,newbuff,visited,last);
                    visited[i] = false;
                }
            }
        }
    }
}
